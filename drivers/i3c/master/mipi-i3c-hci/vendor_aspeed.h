/* SPDX-License-Identifier: GPL-2.0+ */
#ifndef VENDOR_ASPEED_H
#define VENDOR_ASPEED_H

/* Aspeed in-house register */
#include "linux/bitfield.h"
#define ast_inhouse_read(r)		readl(hci->INHOUSE_regs + (r))
#define ast_inhouse_write(r, v)		writel(v, hci->INHOUSE_regs + (r))

#define ASPEED_I3C_CTRL			0x0
#define ASPEED_I3C_CTRL_STOP_QUEUE_PT	BIT(31) //Stop the queue read pointer.
#define ASPEED_I3C_CTRL_INIT		BIT(4)
#define ASPEED_I3C_CTRL_INIT_MODE	GENMASK(1, 0)
#define INIT_MST_MODE 0
#define INIT_SEC_MST_MODE 1
#define INIT_SLV_MODE 2

#define ASPEED_I3C_STS	0x4
#define ASPEED_I3C_STS_SLV_DYNAMIC_ADDRESS_VALID	BIT(23)
#define ASPEED_I3C_STS_SLV_DYNAMIC_ADDRESS		GENMASK(22, 16)
#define ASPEED_I3C_STS_MODE_PURE_SLV			BIT(8)
#define ASPEED_I3C_STS_MODE_SECONDARY_SLV_TO_MST	BIT(7)
#define ASPEED_I3C_STS_MODE_SECONDARY_MST_TO_SLV	BIT(6)
#define ASPEED_I3C_STS_MODE_SECONDARY_SLV		BIT(5)
#define ASPEED_I3C_STS_MODE_SECONDARY_MST		BIT(4)
#define ASPEED_I3C_STS_MODE_PRIMARY_SLV_TO_MST		BIT(3)
#define ASPEED_I3C_STS_MODE_PRIMARY_MST_TO_SLV		BIT(2)
#define ASPEED_I3C_STS_MODE_PRIMARY_SLV			BIT(1)
#define ASPEED_I3C_STS_MODE_PRIMARY_MST			BIT(0)

#define ASPEED_I3C_DAA_INDEX0	0x10
#define ASPEED_I3C_DAA_INDEX1	0x14
#define ASPEED_I3C_DAA_INDEX2	0x18
#define ASPEED_I3C_DAA_INDEX3	0x1C

#define ASPEED_I3C_AUTOCMD_0	0x20
#define ASPEED_I3C_AUTOCMD_1	0x24
#define ASPEED_I3C_AUTOCMD_2	0x28
#define ASPEED_I3C_AUTOCMD_3	0x2C
#define ASPEED_I3C_AUTOCMD_4	0x30
#define ASPEED_I3C_AUTOCMD_5	0x34
#define ASPEED_I3C_AUTOCMD_6	0x38
#define ASPEED_I3C_AUTOCMD_7	0x3C

#define ASPEED_I3C_AUTOCMD_SEL_0_7	0x40
#define ASPEED_I3C_AUTOCMD_SEL_8_15	0x44
#define ASPEED_I3C_AUTOCMD_SEL_16_23	0x48
#define ASPEED_I3C_AUTOCMD_SEL_24_31	0x4C
#define ASPEED_I3C_AUTOCMD_SEL_32_39	0x50
#define ASPEED_I3C_AUTOCMD_SEL_40_47	0x54
#define ASPEED_I3C_AUTOCMD_SEL_48_55	0x58
#define ASPEED_I3C_AUTOCMD_SEL_56_63	0x5C
#define ASPEED_I3C_AUTOCMD_SEL_64_71	0x60
#define ASPEED_I3C_AUTOCMD_SEL_72_79	0x64
#define ASPEED_I3C_AUTOCMD_SEL_80_87	0x68
#define ASPEED_I3C_AUTOCMD_SEL_88_95	0x6C
#define ASPEED_I3C_AUTOCMD_SEL_96_103	0x70
#define ASPEED_I3C_AUTOCMD_SEL_104_111	0x74
#define ASPEED_I3C_AUTOCMD_SEL_112_119	0x78
#define ASPEED_I3C_AUTOCMD_SEL_120_127	0x7C

#define ASPEED_I3C_SLV_CHAR_CTRL	0xA0
#define ASPEED_I3C_SLV_CHAR_CTRL_DCR	GENMASK(23, 16)
#define ASPEED_I3C_SLV_CHAR_CTRL_BCR	GENMASK(15, 8)
#define     SLV_BCR_DEVICE_ROLE		GENMASK(7, 6)
#define ASPEED_I3C_SLV_CHAR_CTRL_STATIC_ADDR_EN	BIT(7)
#define ASPEED_I3C_SLV_CHAR_CTRL_STATIC_ADDR	GENMASK(6, 0)
#define SLV_PID_HI(x)			(((x) >> 32) & GENMASK(15, 0))
#define SLV_PID_LO(x)			((x) & GENMASK(31, 0))
#define ASPEED_I3C_SLV_PID_LO	0xA4
#define ASPEED_I3C_SLV_PID_HI	0xA8
#define ASPEED_I3C_SLV_FSM	0xAC
#define ASPEED_I3C_SLV_CAP_CTRL	0xB0
#define ASPEED_I3C_SLV_CAP_CTRL_PEC_EN		BIT(31)
#define ASPEED_I3C_SLV_CAP_CTRL_HAIT_IF_IBI_ERR	BIT(30)
#define ASPEED_I3C_SLV_CAP_CTRL_ACCEPT_CR	BIT(16)
#define ASPEED_I3C_SLV_CAP_CTRL_HJ_REQ		BIT(10)
#define ASPEED_I3C_SLV_CAP_CTRL_MR_REQ		BIT(9)
#define ASPEED_I3C_SLV_CAP_CTRL_IBI_REQ		BIT(8)
#define ASPEED_I3C_SLV_CAP_CTRL_HJ_WAIT		BIT(6)
#define ASPEED_I3C_SLV_CAP_CTRL_MR_WAIT		BIT(5)
#define ASPEED_I3C_SLV_CAP_CTRL_IBI_WAIT	BIT(4)
#define ASPEED_I3C_SLV_CAP_CTRL_NOTSUP_DEF_BYTE	BIT(1)
#define ASPEED_I3C_SLV_CAP_CTRL_I2C_DEV		BIT(0)
/* CCC related registers */
#define ASPEED_I3C_SLV_STS1			0xB4
#define ASPEED_I3C_SLV_STS1_IBI_PAYLOAD_SIZE	GENMASK(31, 24)
#define ASPEED_I3C_SLV_STS1_RSTACT		GENMASK(22, 16)
/* the parameters for the HDR-DDR Data Transfer Early Termination procedure*/
#define ASPEED_I3C_SLV_STS1_ETP_ACK_CAP		BIT(15)
#define ASPEED_I3C_SLV_STS1_ETP_W_REQ		BIT(14)
#define ASPEED_I3C_SLV_STS1_ETP_CRC		GENMASK(13, 12)
#define ASPEED_I3C_SLV_STS1_ENDXFER_CONFIRM	BIT(11)
#define ASPEED_I3C_SLV_STS1_ENTER_TEST_MDOE	BIT(8)
#define ASPEED_I3C_SLV_STS1_HJ_EN		BIT(6)
#define ASPEED_I3C_SLV_STS1_CR_EN		BIT(5)
#define ASPEED_I3C_SLV_STS1_IBI_EN		BIT(4)
#define ASPEED_I3C_SLV_STS1_HJ_DONE		BIT(2)
#define ASPEED_I3C_SLV_STS1_CR_DONE		BIT(1)
#define ASPEED_I3C_SLV_STS1_IBI_DONE		BIT(0)
#define ASPEED_I3C_SLV_STS2			0xB8
#define ASPEED_I3C_SLV_STS2_MWL			GENMASK(31, 16)
#define ASPEED_I3C_SLV_STS2_MRL			GENMASK(15, 0)
#define ASPEED_I3C_SLV_STS3_GROUP_ADDR		0xBC
#define ASPEED_I3C_SLV_STS3_GROUP3_VALID	BIT(31)
#define ASPEED_I3C_SLV_STS3_GROUP3_ADDR		GENMASK(30, 24)
#define ASPEED_I3C_SLV_STS3_GROUP2_VALID	BIT(23)
#define ASPEED_I3C_SLV_STS3_GROUP2_ADDR		GENMASK(22, 16)
#define ASPEED_I3C_SLV_STS3_GROUP1_VALID	BIT(15)
#define ASPEED_I3C_SLV_STS3_GROUP1_ADDR		GENMASK(14, 8)
#define ASPEED_I3C_SLV_STS3_GROUP0_VALID	BIT(7)
#define ASPEED_I3C_SLV_STS3_GROUP0_ADDR		GENMASK(6, 0)
#define ASPEED_I3C_SLV_STS4_RSTACT_TIME		0xC0
#define ASPEED_I3C_SLV_STS4_DBG_NET		GENMASK(23, 16)
#define ASPEED_I3C_SLV_STS4_WHOLE_CHIP		GENMASK(15, 8)
#define ASPEED_I3C_SLV_STS4_I3C			GENMASK(7, 0)
#define ASPEED_I3C_SLV_STS5_GETMXDS_RW		0xC4
#define ASPEED_I3C_SLV_STS5_MAXWR		GENMASK(15, 8)
#define ASPEED_I3C_SLV_STS5_MAXRD		GENMASK(7, 0)
#define ASPEED_I3C_SLV_STS6_GETMXDS		0xC8
#define ASPEED_I3C_SLV_STS6_FORMAT		BIT(24)
#define ASPEED_I3C_SLV_STS6_MAXRD_TURN_H	GENMASK(23, 16)
#define ASPEED_I3C_SLV_STS6_MAXRD_TURN_M	GENMASK(15, 8)
#define ASPEED_I3C_SLV_STS6_MAXRD_TURN_L	GENMASK(7, 0)
#define ASPEED_I3C_SLV_STS7_GETSTATUS		0xCC
#define ASPEED_I3C_SLV_STS7_PRECR		GENMASK(31, 16)
#define ASPEED_I3C_SLV_STS7_TGT			GENMASK(15, 0)
#define ASPEED_I3C_SLV_STS8_GETCAPS_TGT		0xD0
#define ASPEED_I3C_SLV_STS9_GETCAPS_VT_CR	0xD4
#define ASPEED_I3C_SLV_STS7_VT			GENMASK(31, 16)
#define ASPEED_I3C_SLV_STS7_CR			GENMASK(15, 0)

#define ASPEED_I3C_QUEUE_PTR0		0xD8
#define QUEUE_PTR0_TX_R(q)		FIELD_GET(GENMASK(24, 20), q)
#define QUEUE_PTR0_TX_W(q)		FIELD_GET(GENMASK(16, 12), q)
#define QUEUE_PTR0_IBI_R(q)		FIELD_GET(GENMASK(11, 10), q)
#define QUEUE_PTR0_IBI_W(q)		FIELD_GET(GENMASK(9, 8), q)
#define QUEUE_PTR0_RESP_R(q)		FIELD_GET(GENMASK(7, 6), q)
#define QUEUE_PTR0_RESP_W(q)		FIELD_GET(GENMASK(5, 4), q)
#define QUEUE_PTR0_CMD_R(q)		FIELD_GET(GENMASK(3, 2), q)
#define QUEUE_PTR0_CMD_W(q)		FIELD_GET(GENMASK(1, 0), q)

#define ASPEED_I3C_QUEUE_PTR1		0xDC
#define QUEUE_PTR1_IBI_DATA_R(q)	FIELD_GET(GENMASK(28, 24), q)
#define QUEUE_PTR1_IBI_DATA_W(q)	FIELD_GET(GENMASK(20, 16), q)
#define QUEUE_PTR1_RX_R(q)	        FIELD_GET(GENMASK(12, 8), q)
#define QUEUE_PTR1_RX_W(q)	        FIELD_GET(GENMASK(4, 0), q)

#define ASPEED_I3C_INTR_STATUS		0xE0
#define ASPEED_I3C_INTR_STATUS_ENABLE	0xE4
#define ASPEED_I3C_INTR_SIGNAL_ENABLE	0xE8
#define ASPEED_I3C_INTR_FORCE		0xEC
#define ASPEED_I3C_INTR_I2C_SDA_STUCK_LOW	BIT(14)
#define ASPEED_I3C_INTR_I3C_SDA_STUCK_HIGH	BIT(13)
#define ASPEED_I3C_INTR_I3C_SDA_STUCK_LOW	BIT(12)
#define ASPEED_I3C_INTR_MST_INTERNAL_DONE	BIT(10)
#define ASPEED_I3C_INTR_MST_DDR_READ_DONE	BIT(9)
#define ASPEED_I3C_INTR_MST_DDR_WRITE_DONE	BIT(8)
#define ASPEED_I3C_INTR_MST_IBI_DONE		BIT(7)
#define ASPEED_I3C_INTR_MST_READ_DONE		BIT(6)
#define ASPEED_I3C_INTR_MST_WRITE_DONE		BIT(5)
#define ASPEED_I3C_INTR_MST_DAA_DONE		BIT(4)
#define ASPEED_I3C_INTR_SLV_SCL_STUCK		BIT(1)
#define ASPEED_I3C_INTR_TGRST			BIT(0)

#define ASPEED_I3C_INTR_SUM_STATUS	0xF0
#define ASPEED_INTR_SUM_INHOUSE		BIT(3)
#define ASPEED_INTR_SUM_RHS		BIT(2)
#define ASPEED_INTR_SUM_PIO		BIT(1)
#define ASPEED_INTR_SUM_CAP		BIT(0)

#define ASPEED_I3C_INTR_RENEW		0xF4

/* Aspeed Phy register */
#define ast_phy_read(r)			readl(hci->PHY_regs + (r))
#define ast_phy_write(r, v)		writel(v, hci->PHY_regs + (r))

#define PHY_SW_FORCE_CTRL		0x4
#define PHY_SW_FORCE_CTRL_SCL_IN_EN	BIT(31)
#define PHY_SW_FORCE_CTRL_SCL_OUT_EN	BIT(30)
#define PHY_SW_FORCE_CTRL_SCL_OE_EN	BIT(29)
#define PHY_SW_FORCE_CTRL_SCL_PU_EN	BIT(28)
#define PHY_SW_FORCE_CTRL_SDA_IN_EN	BIT(27)
#define PHY_SW_FORCE_CTRL_SDA_OUT_EN	BIT(26)
#define PHY_SW_FORCE_CTRL_SDA_OE_EN	BIT(25)
#define PHY_SW_FORCE_CTRL_SDA_PU_EN	BIT(24)
#define PHY_SW_FORCE_CTRL_SCL_IN_VAL	BIT(13)
#define PHY_SW_FORCE_CTRL_SCL_OUT_VAL	BIT(12)
#define PHY_SW_FORCE_CTRL_SCL_OE_VAL	BIT(11)
#define PHY_SW_FORCE_CTRL_SCL_PU_VAL	GENMASK(10, 8)
#define PHY_SW_FORCE_CTRL_SDA_IN_VAL	BIT(5)
#define PHY_SW_FORCE_CTRL_SDA_OUT_VAL	BIT(4)
#define PHY_SW_FORCE_CTRL_SDA_OE_VAL	BIT(3)
#define PHY_SW_FORCE_CTRL_SDA_PU_VAL	GENMASK(2, 0)

/* I2C FM: 400K */
#define PHY_I2C_FM_CTRL0		0x8
#define PHY_I2C_FM_CTRL0_CAS		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL0_SU_STO		GENMASK(9, 0)
#define PHY_I2C_FM_CTRL1		0xC
#define PHY_I2C_FM_CTRL1_SCL_H		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL1_SCL_L		GENMASK(9, 0)
#define PHY_I2C_FM_CTRL2		0x10
#define PHY_I2C_FM_CTRL2_ACK_H		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL2_ACK_L		GENMASK(9, 0)
#define PHY_I2C_FM_CTRL3		0x14
#define PHY_I2C_FM_CTRL3_HD_DAT		GENMASK(25, 16)
#define PHY_I2C_FM_CTRL3_AHD_DAT	GENMASK(9, 0)

#define PHY_I2C_FM_DEFAULT_CAS_NS	1130
#define PHY_I2C_FM_DEFAULT_SU_STO_NS	1370
#define PHY_I2C_FM_DEFAULT_SCL_H_NS	1130
#define PHY_I2C_FM_DEFAULT_SCL_L_NS	1370
#define PHY_I2C_FM_DEFAULT_HD_DAT	10
#define PHY_I2C_FM_DEFAULT_AHD_DAT	10

/* I2C FMP: 1M */
#define PHY_I2C_FMP_CTRL0		0x18
#define PHY_I2C_FMP_CTRL0_CAS		GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL0_SU_STO	GENMASK(9, 0)
#define PHY_I2C_FMP_CTRL1		0x1C
#define PHY_I2C_FMP_CTRL1_SCL_H		GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL1_SCL_L		GENMASK(9, 0)
#define PHY_I2C_FMP_CTRL2		0x20
#define PHY_I2C_FMP_CTRL2_ACK_H		GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL2_ACK_L		GENMASK(9, 0)
#define PHY_I2C_FMP_CTRL3		0x24
#define PHY_I2C_FMP_CTRL3_HD_DAT	GENMASK(25, 16)
#define PHY_I2C_FMP_CTRL3_AHD_DAT	GENMASK(9, 0)

#define PHY_I2C_FMP_DEFAULT_CAS_NS	380
#define PHY_I2C_FMP_DEFAULT_SU_STO_NS	620
#define PHY_I2C_FMP_DEFAULT_SCL_H_NS	380
#define PHY_I2C_FMP_DEFAULT_SCL_L_NS	620
#define PHY_I2C_FMP_DEFAULT_HD_DAT	10
#define PHY_I2C_FMP_DEFAULT_AHD_DAT	10

/* I3C OD */
#define PHY_I3C_OD_CTRL0		0x28
#define PHY_I3C_OD_CTRL0_CAS		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL0_CBP		GENMASK(9, 0)
#define PHY_I3C_OD_CTRL1		0x2C
#define PHY_I3C_OD_CTRL1_SCL_H		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL1_SCL_L		GENMASK(9, 0)
#define PHY_I3C_OD_CTRL2		0x30
#define PHY_I3C_OD_CTRL2_ACK_H		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL2_ACK_L		GENMASK(9, 0)
#define PHY_I3C_OD_CTRL3		0x34
#define PHY_I3C_OD_CTRL3_HD_DAT		GENMASK(25, 16)
#define PHY_I3C_OD_CTRL3_AHD_DAT	GENMASK(9, 0)

#define PHY_I3C_OD_DEFAULT_CAS_NS	40
#define PHY_I3C_OD_DEFAULT_CBP_NS	40
#define PHY_I3C_OD_DEFAULT_SCL_H_NS	380
#define PHY_I3C_OD_DEFAULT_SCL_L_NS	620
#define PHY_I3C_OD_DEFAULT_HD_DAT	10
#define PHY_I3C_OD_DEFAULT_AHD_DAT	10

/* I3C PP SDR0 */
#define PHY_I3C_SDR0_CTRL0			0x38
#define PHY_I3C_SDR0_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR0_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR0_CTRL1			0x3C
#define PHY_I3C_SDR0_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR0_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR0_CTRL2			0x40
#define PHY_I3C_SDR0_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR0_CTRL2_TBIT_HD_PP		GENMASK(9, 0)

/* 1MHz */
#define PHY_I3C_SDR0_DEFAULT_SCL_H_NS		380
#define PHY_I3C_SDR0_DEFAULT_SCL_L_NS		620
#define PHY_I3C_SDR0_DEFAULT_TBIT_H_NS		380
#define PHY_I3C_SDR0_DEFAULT_TBIT_L_NS		620
#define PHY_I3C_SDR0_DEFAULT_HD_PP_NS		10
#define PHY_I3C_SDR0_DEFAULT_TBIT_HD_PP_NS	10

#define PHY_I3C_CTRL0_OFFSET		0x0
#define PHY_I3C_CTRL1_OFFSET		0x4
#define PHY_I3C_CTRL2_OFFSET		0x8
/* I3C PP SDR1 */
#define PHY_I3C_SDR1_CTRL0			0x44
#define PHY_I3C_SDR1_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR1_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR1_CTRL1			0x48
#define PHY_I3C_SDR1_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR1_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR1_CTRL2			0x4C
#define PHY_I3C_SDR1_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR1_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP SDR2 */
#define PHY_I3C_SDR2_CTRL0			0x50
#define PHY_I3C_SDR2_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR2_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR2_CTRL1			0x54
#define PHY_I3C_SDR2_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR2_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR2_CTRL2			0x58
#define PHY_I3C_SDR2_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR2_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP SDR3 */
#define PHY_I3C_SDR3_CTRL0			0x5C
#define PHY_I3C_SDR3_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR3_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR3_CTRL1			0x60
#define PHY_I3C_SDR3_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR3_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR3_CTRL2			0x64
#define PHY_I3C_SDR3_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR3_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP SDR4 */
#define PHY_I3C_SDR4_CTRL0			0x68
#define PHY_I3C_SDR4_CTRL0_SCL_H		GENMASK(25, 16)
#define PHY_I3C_SDR4_CTRL0_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SDR4_CTRL1			0x6C
#define PHY_I3C_SDR4_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_SDR4_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_SDR4_CTRL2			0x70
#define PHY_I3C_SDR4_CTRL2_HD_PP		GENMASK(25, 16)
#define PHY_I3C_SDR4_CTRL2_TBIT_HD_PP		GENMASK(9, 0)
/* I3C PP DDR */
#define PHY_I3C_DDR_CTRL0			0x74
#define PHY_I3C_DDR_CTRL0_SCL_H			GENMASK(25, 16)
#define PHY_I3C_DDR_CTRL0_SCL_L			GENMASK(9, 0)
#define PHY_I3C_DDR_CTRL1			0x78
#define PHY_I3C_DDR_CTRL1_TBIT_H		GENMASK(25, 16)
#define PHY_I3C_DDR_CTRL1_TBIT_L		GENMASK(9, 0)
#define PHY_I3C_DDR_CTRL2			0x7C
#define PHY_I3C_DDR_CTRL2_HD_PP			GENMASK(25, 16)
#define PHY_I3C_DDR_CTRL2_TBIT_HD_PP		GENMASK(9, 0)

/* 1MHz */
#define PHY_I3C_DDR_DEFAULT_SCL_H_NS		380
#define PHY_I3C_DDR_DEFAULT_SCL_L_NS		620
#define PHY_I3C_DDR_DEFAULT_TBIT_H_NS		380
#define PHY_I3C_DDR_DEFAULT_TBIT_L_NS		620
#define PHY_I3C_DDR_DEFAULT_HD_PP_NS		10
#define PHY_I3C_DDR_DEFAULT_TBIT_HD_PP_NS	10

#define PHY_I3C_SR_P_PREPARE_CTRL		0x80
#define PHY_I3C_SR_P_PREPARE_CTRL_HD		GENMASK(25, 16)
#define PHY_I3C_SR_P_PREPARE_CTRL_SCL_L		GENMASK(9, 0)
#define PHY_I3C_SR_P_DEFAULT_HD_NS	10
#define PHY_I3C_SR_P_DEFAULT_SCL_L_NS	40

#define PHY_PULLUP_EN		0x98
#define PHY_PULLUP_EN_SCL	GENMASK(14, 12)
#define PHY_PULLUP_EN_SDA	GENMASK(10, 8)
#define PHY_PULLUP_EN_DDR_SCL	GENMASK(6, 4)
#define PHY_PULLUP_EN_DDR_SDA	GENMASK(2, 0)

static inline unsigned int aspeed_get_avail_tx_entries(struct i3c_hci *hci)
{
	unsigned int queue_ptr, entries;

	queue_ptr = ast_inhouse_read(ASPEED_I3C_QUEUE_PTR0);
	if (QUEUE_PTR0_TX_W(queue_ptr) >= QUEUE_PTR0_TX_R(queue_ptr))
		entries = 0x20 - (QUEUE_PTR0_TX_W(queue_ptr) -
				  QUEUE_PTR0_TX_R(queue_ptr));
	else
		entries = QUEUE_PTR0_TX_R(queue_ptr) - QUEUE_PTR0_TX_W(queue_ptr);

	return entries;
}

static inline unsigned int aspeed_get_received_rx_entries(struct i3c_hci *hci)
{
	unsigned int queue_ptr, entries;

	queue_ptr = ast_inhouse_read(ASPEED_I3C_QUEUE_PTR1);
	if (QUEUE_PTR1_RX_W(queue_ptr) >= QUEUE_PTR1_RX_R(queue_ptr))
		entries = QUEUE_PTR1_RX_W(queue_ptr) - QUEUE_PTR1_RX_R(queue_ptr);
	else
		entries = 0x20 - (QUEUE_PTR1_RX_R(queue_ptr) -
				  QUEUE_PTR1_RX_W(queue_ptr));

	return entries;
}

static inline unsigned int aspeed_get_i3c_revision_id(struct i3c_hci *hci)
{
	return FIELD_GET(GENMASK(23, 16), hci->vendor_product_id);
}

static inline void aspeed_i3c_ccc_handler(struct i3c_hci *hci, u8 ccc)
{
	u32 reg;
	u8 dynamic_addr;

	switch (ccc) {
	case I3C_CCC_RSTDAA(true):
	case I3C_CCC_RSTDAA(false):
		hci->master.this->info.dyn_addr = 0;
		break;
	case I3C_CCC_ENTDAA:
	case I3C_CCC_SETDASA:
	case I3C_CCC_SETNEWDA:
	case I3C_CCC_SETAASA:
		reg = ast_inhouse_read(ASPEED_I3C_STS);
		if (reg & ASPEED_I3C_STS_SLV_DYNAMIC_ADDRESS_VALID) {
			dynamic_addr = FIELD_GET(ASPEED_I3C_STS_SLV_DYNAMIC_ADDRESS, reg);
			hci->master.this->info.dyn_addr = dynamic_addr;
		}
		break;
	}
}

#endif
