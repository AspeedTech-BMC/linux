/*
 * ast_i2c_h   - I2C driver header for the Aspeed SoC
 *
 * Copyright (C) ASPEED Technology Inc.
 * Ryan Chen <ryan_chen@aspeedtech.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version
 * 2 of the License, or (at your option) any later version.
 *
 */
#include <linux/i2c.h> 

/* I2C Register */
#define  I2C_FUN_CTRL_REG    				0x00
#define  I2C_AC_TIMING_REG1         		0x04
#define  I2C_AC_TIMING_REG2         		0x08
#define  I2C_INTR_CTRL_REG					0x0c
#define  I2C_INTR_STS_REG					0x10
#define  I2C_CMD_REG						0x14
#define  I2C_DEV_ADDR_REG					0x18
#define  I2C_BUF_CTRL_REG					0x1c
#define  I2C_BYTE_BUF_REG					0x20
#define  I2C_DMA_BASE_REG					0x24
#define  I2C_DMA_LEN_REG					0x28

/* Device Register Definition */
/* 0x00 : I2CD Function Control Register  */
#define AST_I2CD_BUFF_SEL_MASK				(0x7 << 20)
#define AST_I2CD_BUFF_SEL(x) 				((x) << 20)		// page 0 ~ 7

#define AST_I2CD_BUS_AUTO_RELEASE			(0x1 << 17)		//only support ast_soc_g5

#define AST_I2CD_M_SDA_LOCK_EN				(0x1 << 16)
#define AST_I2CD_MULTI_MASTER_DIS			(0x1 << 15)
#define AST_I2CD_M_SCL_DRIVE_EN				(0x1 << 14)
#define AST_I2CD_MSB_STS					(0x1 << 9)
#define AST_I2CD_SDA_DRIVE_1T_EN			(0x1 << 8)
#define AST_I2CD_M_SDA_DRIVE_1T_EN			(0x1 << 7)
#define AST_I2CD_M_HIGH_SPEED_EN			(0x1 << 6)
#define AST_I2CD_DEF_ADDR_EN				(0x1 << 5)
#define AST_I2CD_DEF_ALERT_EN				(0x1 << 4)
#define AST_I2CD_DEF_ARP_EN					(0x1 << 3)
#define AST_I2CD_DEF_GCALL_EN				(0x1 << 2)
#define AST_I2CD_SLAVE_EN					(0x1 << 1)
#define AST_I2CD_MASTER_EN					(0x1 )

/* 0x04 : I2CD Clock and AC Timing Control Register #1 */
#define AST_I2CD_tBUF						(0x1 << 28) 	// 0~7 
#define AST_I2CD_tHDSTA						(0x1 << 24)		// 0~7 
#define AST_I2CD_tACST						(0x1 << 20)		// 0~7 
#define AST_I2CD_tCKHIGH					(0x1 << 16)		// 0~7 
#define AST_I2CD_tCKLOW						(0x1 << 12)		// 0~7 
#define AST_I2CD_tHDDAT						(0x1 << 10)		// 0~7 
#define AST_I2CD_CLK_TO_BASE_DIV			(0x1 << 8)		// 0~3
#define AST_I2CD_CLK_BASE_DIV				(0x1 )			// 0~0xf

/* 0x08 : I2CD Clock and AC Timing Control Register #2 */
#define AST_I2CD_tTIMEOUT					(0x1 )			// 0~7
#define AST_NO_TIMEOUT_CTRL					0x0


/* 0x0c : I2CD Interrupt Control Register  */
#define AST_I2CD_INTR_STS_SLAVE_TO_EN			(0x1 << 15)	//support ast_soc_g5

#define AST_I2CD_SDA_DL_TO_INTR_EN				(0x1 << 14)		
#define AST_I2CD_BUS_RECOVER_INTR_EN			(0x1 << 13)		
#define AST_I2CD_SMBUS_ALT_INTR_EN				(0x1 << 12)		
#define AST_I2CD_SLAVE_MATCH_INTR_EN			(0x1 << 7)		
#define AST_I2CD_SCL_TO_INTR_EN					(0x1 << 6)		
#define AST_I2CD_ABNORMAL_INTR_EN				(0x1 << 5)		
#define AST_I2CD_NORMAL_STOP_INTR_EN			(0x1 << 4)
#define AST_I2CD_ARBIT_LOSS_INTR_EN				(0x1 << 3)		
#define AST_I2CD_RX_DOWN_INTR_EN				(0x1 << 2)		
#define AST_I2CD_TX_NAK_INTR_EN					(0x1 << 1)		
#define AST_I2CD_TX_ACK_INTR_EN					(0x1)		

/* 0x10 : I2CD Interrupt Status Register   : WC */
#define AST_I2CD_INTR_STS_SLAVE_TO				(0x1 << 15)	//support ast_soc_g5

#define AST_I2CD_INTR_STS_SDA_DL_TO				(0x1 << 14)
#define AST_I2CD_INTR_STS_BUS_RECOVER			(0x1 << 13)		
#define AST_I2CD_INTR_STS_SMBUS_ALT				(0x1 << 12)		
#define AST_I2CD_INTR_STS_SMBUS_ARP_ADDR		(0x1 << 11)		
#define AST_I2CD_INTR_STS_SMBUS_DEV_ALT			(0x1 << 10)		
#define AST_I2CD_INTR_STS_SMBUS_DEF_ADDR		(0x1 << 9)		
#define AST_I2CD_INTR_STS_GCALL_ADDR			(0x1 << 8)		
#define AST_I2CD_INTR_STS_SLAVE_MATCH			(0x1 << 7)		
#define AST_I2CD_INTR_STS_SCL_TO				(0x1 << 6)		
#define AST_I2CD_INTR_STS_ABNORMAL				(0x1 << 5)		
#define AST_I2CD_INTR_STS_NORMAL_STOP			(0x1 << 4)
#define AST_I2CD_INTR_STS_ARBIT_LOSS			(0x1 << 3)
#define AST_I2CD_INTR_STS_RX_DOWN				(0x1 << 2)		
#define AST_I2CD_INTR_STS_TX_NAK				(0x1 << 1)		
#define AST_I2CD_INTR_STS_TX_ACK				(0x1)		

/* 0x14 : I2CD Command/Status Register   */
#define AST_I2CD_SDA_OE							(0x1 << 28)
#define AST_I2CD_SDA_O							(0x1 << 27)		
#define AST_I2CD_SCL_OE							(0x1 << 26)		
#define AST_I2CD_SCL_O							(0x1 << 25)		
#define AST_I2CD_TX_TIMING						(0x1 << 24)		// 0 ~3
#define AST_I2CD_TX_STATUS						(0x1 << 23)		
// Tx State Machine 
#define AST_I2CD_IDLE	 				0x0
#define AST_I2CD_MACTIVE				0x8
#define AST_I2CD_MSTART					0x9
#define AST_I2CD_MSTARTR				0xa
#define AST_I2CD_MSTOP					0xb
#define AST_I2CD_MTXD					0xc
#define AST_I2CD_MRXACK					0xd
#define AST_I2CD_MRXD 					0xe
#define AST_I2CD_MTXACK 				0xf
#define AST_I2CD_SWAIT					0x1
#define AST_I2CD_SRXD 					0x4
#define AST_I2CD_STXACK 				0x5
#define AST_I2CD_STXD					0x6
#define AST_I2CD_SRXACK 				0x7
#define AST_I2CD_RECOVER 				0x3

#define AST_I2CD_SCL_LINE_STS				(0x1 << 18)		
#define AST_I2CD_SDA_LINE_STS				(0x1 << 17)		
#define AST_I2CD_BUS_BUSY_STS				(0x1 << 16)		
#define AST_I2CD_SDA_OE_OUT_DIR				(0x1 << 15)		
#define AST_I2CD_SDA_O_OUT_DIR				(0x1 << 14)		
#define AST_I2CD_SCL_OE_OUT_DIR				(0x1 << 13)		
#define AST_I2CD_SCL_O_OUT_DIR				(0x1 << 12)		
#define AST_I2CD_BUS_RECOVER_CMD_EN			(0x1 << 11)		
#define AST_I2CD_S_ALT_EN					(0x1 << 10)		
// 0 : DMA Buffer, 1: Pool Buffer
//AST1070 DMA register 
#define AST_I2CD_RX_DMA_ENABLE				(0x1 << 9)		
#define AST_I2CD_TX_DMA_ENABLE				(0x1 << 8)		

/* Command Bit */
#define AST_I2CD_RX_BUFF_ENABLE				(0x1 << 7)		
#define AST_I2CD_TX_BUFF_ENABLE				(0x1 << 6)		
#define AST_I2CD_M_STOP_CMD					(0x1 << 5)		
#define AST_I2CD_M_S_RX_CMD_LAST			(0x1 << 4)		
#define AST_I2CD_M_RX_CMD					(0x1 << 3)		
#define AST_I2CD_S_TX_CMD					(0x1 << 2)		
#define AST_I2CD_M_TX_CMD					(0x1 << 1)		
#define AST_I2CD_M_START_CMD				(0x1 )		

/* 0x18 : I2CD Slave Device Address Register   */
#define AST_I2CD_SLAVE2_ENABLE				(0x1 << 5)

/* 0x1C : I2CD Pool Buffer Control Register   */
#define AST_I2CD_RX_BUF_ADDR_GET(x)			((x>> 24)& 0xff)
#define AST_I2CD_RX_BUF_END_ADDR_SET(x)		(x << 16)		
#define AST_I2CD_TX_DATA_BUF_END_SET(x)		((x&0xff) << 8)		
#define AST_I2CD_TX_DATA_BUF_GET(x)			((x >>8) & 0xff)		
#define AST_I2CD_BUF_BASE_ADDR_SET(x)		(x & 0x3f)		

/* 0x20 : I2CD Transmit/Receive Byte Buffer Register   */
#define AST_I2CD_GET_MODE(x)				((x >> 8) & 0x1)		

#define AST_I2CD_RX_BYTE_BUFFER				(0xff << 8)		
#define AST_I2CD_TX_BYTE_BUFFER				(0xff )		

struct ast_i2c_timing_table {
	u32 divisor;
	u32 timing;
};

static struct ast_i2c_timing_table ast_g5_i2c_timing_table[] = {
	/* Divisor : Base Clock : tCK High : tCK Low  */		
	/* Divisor :	  [3:0]    :   [19:16]:   [15:12] */
	{6,		0x77700300 | (0x0) | (0x2<<16) | (0x2<<12) },
	{7,		0x77700300 | (0x0) | (0x3<<16) | (0x2<<12) },
	{8,		0x77700300 | (0x0) | (0x3<<16) | (0x3<<12) },	
	{9,		0x77700300 | (0x0) | (0x4<<16) | (0x3<<12) },
	{10, 	0x77700300 | (0x0) | (0x4<<16) | (0x4<<12) },
	{11, 	0x77700300 | (0x0) | (0x5<<16) | (0x4<<12) },
	{12, 	0x77700300 | (0x0) | (0x5<<16) | (0x5<<12) },
	{13, 	0x77700300 | (0x0) | (0x6<<16) | (0x5<<12) },
	{14, 	0x77700300 | (0x0) | (0x6<<16) | (0x6<<12) },
	{15, 	0x77700300 | (0x0) | (0x7<<16) | (0x6<<12) },
	{16, 	0x77700300 | (0x0) | (0x7<<16) | (0x7<<12) },
	{17, 	0x77700300 | (0x0) | (0x8<<16) | (0x7<<12) },
	{18, 	0x77700300 | (0x0) | (0x8<<16) | (0x8<<12) },
	{19, 	0x77700300 | (0x0) | (0x9<<16) | (0x8<<12) },
	{20, 	0x77700300 | (0x0) | (0x9<<16) | (0x9<<12) },
	{21, 	0x77700300 | (0x0) | (0xa<<16) | (0x9<<12) },
	{22, 	0x77700300 | (0x0) | (0xa<<16) | (0xa<<12) },
	{23, 	0x77700300 | (0x0) | (0xb<<16) | (0xa<<12) },
	{24, 	0x77700300 | (0x0) | (0xb<<16) | (0xb<<12) },
	{25, 	0x77700300 | (0x0) | (0xc<<16) | (0xb<<12) },
	{26, 	0x77700300 | (0x0) | (0xc<<16) | (0xc<<12) },
	{27, 	0x77700300 | (0x0) | (0xd<<16) | (0xc<<12) },
	{28, 	0x77700300 | (0x0) | (0xd<<16) | (0xd<<12) },
	{29, 	0x77700300 | (0x0) | (0xe<<16) | (0xd<<12) },
	{30, 	0x77700300 | (0x0) | (0xe<<16) | (0xe<<12) },
	{31, 	0x77700300 | (0x0) | (0xf<<16) | (0xe<<12) },
	{32, 	0x77700300 | (0x0) | (0xf<<16) | (0xf<<12) },
	
	{34, 	0x77700300 | (0x1) | (0x8<<16) | (0x7<<12) },
	{36, 	0x77700300 | (0x1) | (0x8<<16) | (0x8<<12) },
	{38, 	0x77700300 | (0x1) | (0x9<<16) | (0x8<<12) },
	{40, 	0x77700300 | (0x1) | (0x9<<16) | (0x9<<12) },
	{42, 	0x77700300 | (0x1) | (0xa<<16) | (0x9<<12) },
	{44, 	0x77700300 | (0x1) | (0xa<<16) | (0xa<<12) },
	{46, 	0x77700300 | (0x1) | (0xb<<16) | (0xa<<12) },
	{48, 	0x77700300 | (0x1) | (0xb<<16) | (0xb<<12) },
	{50, 	0x77700300 | (0x1) | (0xc<<16) | (0xb<<12) },
	{52, 	0x77700300 | (0x1) | (0xc<<16) | (0xc<<12) },
	{54, 	0x77700300 | (0x1) | (0xd<<16) | (0xc<<12) },
	{56, 	0x77700300 | (0x1) | (0xd<<16) | (0xd<<12) },
	{58, 	0x77700300 | (0x1) | (0xe<<16) | (0xd<<12) },
	{60, 	0x77700300 | (0x1) | (0xe<<16) | (0xe<<12) },
	{62, 	0x77700300 | (0x1) | (0xf<<16) | (0xe<<12) },
	{64, 	0x77700300 | (0x1) | (0xf<<16) | (0xf<<12) },
	
	{68, 	0x77700300 | (0x2) | (0x8<<16) | (0x7<<12) },
	{72, 	0x77700300 | (0x2) | (0x8<<16) | (0x8<<12) },
	{76, 	0x77700300 | (0x2) | (0x9<<16) | (0x8<<12) },
	{80, 	0x77700300 | (0x2) | (0x9<<16) | (0x9<<12) },
	{84, 	0x77700300 | (0x2) | (0xa<<16) | (0x9<<12) },
	{88, 	0x77700300 | (0x2) | (0xa<<16) | (0xa<<12) },
	{92, 	0x77700300 | (0x2) | (0xb<<16) | (0xa<<12) },
	{96, 	0x77700300 | (0x2) | (0xb<<16) | (0xb<<12) },
	{100, 	0x77700300 | (0x2) | (0xc<<16) | (0xb<<12) },
	{104, 	0x77700300 | (0x2) | (0xc<<16) | (0xc<<12) },
	{108, 	0x77700300 | (0x2) | (0xd<<16) | (0xc<<12) },
	{112, 	0x77700300 | (0x2) | (0xd<<16) | (0xd<<12) },
	{116, 	0x77700300 | (0x2) | (0xe<<16) | (0xd<<12) },
	{120, 	0x77700300 | (0x2) | (0xe<<16) | (0xe<<12) },
	{124, 	0x77700300 | (0x2) | (0xf<<16) | (0xe<<12) },
	{128, 	0x77700300 | (0x2) | (0xf<<16) | (0xf<<12) },
	
	{136, 	0x77700300 | (0x3) | (0x8<<16) | (0x7<<12) },
	{144, 	0x77700300 | (0x3) | (0x8<<16) | (0x8<<12) },
	{152, 	0x77700300 | (0x3) | (0x9<<16) | (0x8<<12) },
	{160, 	0x77700300 | (0x3) | (0x9<<16) | (0x9<<12) },
	{168, 	0x77700300 | (0x3) | (0xa<<16) | (0x9<<12) },
	{176, 	0x77700300 | (0x3) | (0xa<<16) | (0xa<<12) },
	{184, 	0x77700300 | (0x3) | (0xb<<16) | (0xa<<12) },
	{192, 	0x77700300 | (0x3) | (0xb<<16) | (0xb<<12) },
	{200, 	0x77700300 | (0x3) | (0xc<<16) | (0xb<<12) },
	{208, 	0x77700300 | (0x3) | (0xc<<16) | (0xc<<12) },
	{216, 	0x77700300 | (0x3) | (0xd<<16) | (0xc<<12) },
	{224, 	0x77700300 | (0x3) | (0xd<<16) | (0xd<<12) },
	{232, 	0x77700300 | (0x3) | (0xe<<16) | (0xd<<12) },
	{240, 	0x77700300 | (0x3) | (0xe<<16) | (0xe<<12) },
	{248, 	0x77700300 | (0x3) | (0xf<<16) | (0xe<<12) },
	{256, 	0x77700300 | (0x3) | (0xf<<16) | (0xf<<12) },

	{272, 	0x77700300 | (0x4) | (0x8<<16) | (0x7<<12) },
	{288, 	0x77700300 | (0x4) | (0x8<<16) | (0x8<<12) },
	{304, 	0x77700300 | (0x4) | (0x9<<16) | (0x8<<12) },
	{320, 	0x77700300 | (0x4) | (0x9<<16) | (0x9<<12) },
	{336, 	0x77700300 | (0x4) | (0xa<<16) | (0x9<<12) },
	{352, 	0x77700300 | (0x4) | (0xa<<16) | (0xa<<12) },
	{368, 	0x77700300 | (0x4) | (0xb<<16) | (0xa<<12) },
	{384, 	0x77700300 | (0x4) | (0xb<<16) | (0xb<<12) },
	{400, 	0x77700300 | (0x4) | (0xc<<16) | (0xb<<12) },
	{416, 	0x77700300 | (0x4) | (0xc<<16) | (0xc<<12) },
	{432, 	0x77700300 | (0x4) | (0xd<<16) | (0xc<<12) },
	{448, 	0x77700300 | (0x4) | (0xd<<16) | (0xd<<12) },
	{464, 	0x77700300 | (0x4) | (0xe<<16) | (0xd<<12) },
	{480, 	0x77700300 | (0x4) | (0xe<<16) | (0xe<<12) },
	{496, 	0x77700300 | (0x4) | (0xf<<16) | (0xe<<12) },
	{512, 	0x77700300 | (0x4) | (0xf<<16) | (0xf<<12) },

	{544, 	0x77700300 | (0x5) | (0x8<<16) | (0x7<<12) },
	{576, 	0x77700300 | (0x5) | (0x8<<16) | (0x8<<12) },
	{608, 	0x77700300 | (0x5) | (0x9<<16) | (0x8<<12) },
	{640, 	0x77700300 | (0x5) | (0x9<<16) | (0x9<<12) },
	{672, 	0x77700300 | (0x5) | (0xa<<16) | (0x9<<12) },
	{704, 	0x77700300 | (0x5) | (0xa<<16) | (0xa<<12) },
	{736, 	0x77700300 | (0x5) | (0xb<<16) | (0xa<<12) },
	{768, 	0x77700300 | (0x5) | (0xb<<16) | (0xb<<12) },
	{800, 	0x77700300 | (0x5) | (0xc<<16) | (0xb<<12) },
	{832, 	0x77700300 | (0x5) | (0xc<<16) | (0xc<<12) },
	{864, 	0x77700300 | (0x5) | (0xd<<16) | (0xc<<12) },
	{896, 	0x77700300 | (0x5) | (0xd<<16) | (0xd<<12) },
	{928, 	0x77700300 | (0x5) | (0xe<<16) | (0xd<<12) },
	{960, 	0x77700300 | (0x5) | (0xe<<16) | (0xe<<12) },
	{992, 	0x77700300 | (0x5) | (0xf<<16) | (0xe<<12) },
	{1024, 	0x77700300 | (0x5) | (0xf<<16) | (0xf<<12) },

	{1088, 	0x77700300 | (0x6) | (0x8<<16) | (0x7<<12) },
	{1152, 	0x77700300 | (0x6) | (0x8<<16) | (0x8<<12) },
	{1216, 	0x77700300 | (0x6) | (0x9<<16) | (0x8<<12) },
	{1280, 	0x77700300 | (0x6) | (0x9<<16) | (0x9<<12) },
	{1344, 	0x77700300 | (0x6) | (0xa<<16) | (0x9<<12) },
	{1408, 	0x77700300 | (0x6) | (0xa<<16) | (0xa<<12) },
	{1472, 	0x77700300 | (0x6) | (0xb<<16) | (0xa<<12) },
	{1536, 	0x77700300 | (0x6) | (0xb<<16) | (0xb<<12) },
	{1600, 	0x77700300 | (0x6) | (0xc<<16) | (0xb<<12) },
	{1664, 	0x77700300 | (0x6) | (0xc<<16) | (0xc<<12) },
	{1728, 	0x77700300 | (0x6) | (0xd<<16) | (0xc<<12) },
	{1792, 	0x77700300 | (0x6) | (0xd<<16) | (0xd<<12) },
	{1856, 	0x77700300 | (0x6) | (0xe<<16) | (0xd<<12) },
	{1920, 	0x77700300 | (0x6) | (0xe<<16) | (0xe<<12) },
	{1984, 	0x77700300 | (0x6) | (0xf<<16) | (0xe<<12) },
	{2048, 	0x77700300 | (0x6) | (0xf<<16) | (0xf<<12) },

	{2176, 	0x77700300 | (0x7) | (0x8<<16) | (0x7<<12) },
	{2304, 	0x77700300 | (0x7) | (0x8<<16) | (0x8<<12) },
	{2432, 	0x77700300 | (0x7) | (0x9<<16) | (0x8<<12) },
	{2560, 	0x77700300 | (0x7) | (0x9<<16) | (0x9<<12) },
	{2688, 	0x77700300 | (0x7) | (0xa<<16) | (0x9<<12) },
	{2816, 	0x77700300 | (0x7) | (0xa<<16) | (0xa<<12) },
	{2944, 	0x77700300 | (0x7) | (0xb<<16) | (0xa<<12) },
	{3072, 	0x77700300 | (0x7) | (0xb<<16) | (0xb<<12) },
};
	
static struct ast_i2c_timing_table ast_i2c_timing_table[] = {
/* Divisor :      [3:0]    :   [18:16]:   [13:12] */
	{6,		0x77700300 | (0x0) | (0x2<<16) | (0x2<<12) },
	{7, 	0x77700300 | (0x0) | (0x3<<16) | (0x2<<12) },
	{8, 	0x77700300 | (0x0) | (0x3<<16) | (0x3<<12) },	
	{9, 	0x77700300 | (0x0) | (0x4<<16) | (0x3<<12) },
	{10,	0x77700300 | (0x0) | (0x4<<16) | (0x4<<12) },
	{11,	0x77700300 | (0x0) | (0x5<<16) | (0x4<<12) },
	{12,	0x77700300 | (0x0) | (0x5<<16) | (0x5<<12) },
	{13,	0x77700300 | (0x0) | (0x6<<16) | (0x5<<12) },
	{14,	0x77700300 | (0x0) | (0x6<<16) | (0x6<<12) },
	{15,	0x77700300 | (0x0) | (0x7<<16) | (0x6<<12) },
	{16,	0x77700300 | (0x0) | (0x7<<16) | (0x7<<12) },
	
	{18,	0x77700300 | (0x1) | (0x4<<16) | (0x3<<12) },
	{20,	0x77700300 | (0x1) | (0x4<<16) | (0x4<<12) },
	{22,	0x77700300 | (0x1) | (0x5<<16) | (0x4<<12) },
	{24,	0x77700300 | (0x1) | (0x5<<16) | (0x5<<12) },
	{26,	0x77700300 | (0x1) | (0x6<<16) | (0x5<<12) },
	{28,	0x77700300 | (0x1) | (0x6<<16) | (0x6<<12) },
	{30,	0x77700300 | (0x1) | (0x7<<16) | (0x6<<12) },
	{32,	0x77700300 | (0x1) | (0x7<<16) | (0x7<<12) },
	
	{36,	0x77700300 | (0x2) | (0x4<<16) | (0x3<<12) },
	{40,	0x77700300 | (0x2) | (0x4<<16) | (0x4<<12) },
	{44,	0x77700300 | (0x2) | (0x5<<16) | (0x4<<12) },
	{48,	0x77700300 | (0x2) | (0x5<<16) | (0x5<<12) },
	{52,	0x77700300 | (0x2) | (0x6<<16) | (0x5<<12) },
	{56,	0x77700300 | (0x2) | (0x6<<16) | (0x6<<12) },
	{60,	0x77700300 | (0x2) | (0x7<<16) | (0x6<<12) },
	{64,	0x77700300 | (0x2) | (0x7<<16) | (0x7<<12) },

	{72,	0x77700300 | (0x3) | (0x4<<16) | (0x3<<12) },
	{80,	0x77700300 | (0x3) | (0x4<<16) | (0x4<<12) },
	{88,	0x77700300 | (0x3) | (0x5<<16) | (0x4<<12) },
	{96,	0x77700300 | (0x3) | (0x5<<16) | (0x5<<12) },
	{104,	0x77700300 | (0x3) | (0x6<<16) | (0x5<<12) },
	{112,	0x77700300 | (0x3) | (0x6<<16) | (0x6<<12) },
	{120,	0x77700300 | (0x3) | (0x7<<16) | (0x6<<12) },
	{128,	0x77700300 | (0x3) | (0x7<<16) | (0x7<<12) },

	{144,	0x77700300 | (0x4) | (0x4<<16) | (0x3<<12) },
	{160,	0x77700300 | (0x4) | (0x4<<16) | (0x4<<12) },
	{176,	0x77700300 | (0x4) | (0x5<<16) | (0x4<<12) },
	{192,	0x77700300 | (0x4) | (0x5<<16) | (0x5<<12) },
	{208,	0x77700300 | (0x4) | (0x6<<16) | (0x5<<12) },
	{224,	0x77700300 | (0x4) | (0x6<<16) | (0x6<<12) },
	{240,	0x77700300 | (0x4) | (0x7<<16) | (0x6<<12) },
	{256,	0x77700300 | (0x4) | (0x7<<16) | (0x7<<12) },

	{288,	0x77700300 | (0x5) | (0x4<<16) | (0x3<<12) },
	{320,	0x77700300 | (0x5) | (0x4<<16) | (0x4<<12) },
	{352,	0x77700300 | (0x5) | (0x5<<16) | (0x4<<12) },
	{384,	0x77700300 | (0x5) | (0x5<<16) | (0x5<<12) },
	{416,	0x77700300 | (0x5) | (0x6<<16) | (0x5<<12) },
	{448,	0x77700300 | (0x5) | (0x6<<16) | (0x6<<12) },
	{480,	0x77700300 | (0x5) | (0x7<<16) | (0x6<<12) },
	{512,	0x77700300 | (0x5) | (0x7<<16) | (0x7<<12) },

	{576,	0x77700300 | (0x6) | (0x4<<16) | (0x3<<12) },
	{640,	0x77700300 | (0x6) | (0x4<<16) | (0x4<<12) },
	{704,	0x77700300 | (0x6) | (0x5<<16) | (0x4<<12) },
	{768,	0x77700300 | (0x6) | (0x5<<16) | (0x5<<12) },
	{832,	0x77700300 | (0x6) | (0x6<<16) | (0x5<<12) },
	{896,	0x77700300 | (0x6) | (0x6<<16) | (0x6<<12) },
	{960,	0x77700300 | (0x6) | (0x7<<16) | (0x6<<12) },
	{1024,	0x77700300 | (0x6) | (0x7<<16) | (0x7<<12) },

	{1152,	0x77700300 | (0x7) | (0x4<<16) | (0x3<<12) },
	{1280,	0x77700300 | (0x7) | (0x4<<16) | (0x4<<12) },
	{1408,	0x77700300 | (0x7) | (0x5<<16) | (0x4<<12) },
	{1536,	0x77700300 | (0x7) | (0x5<<16) | (0x5<<12) },
	{1664,	0x77700300 | (0x7) | (0x6<<16) | (0x5<<12) },
	{1792,	0x77700300 | (0x7) | (0x6<<16) | (0x6<<12) },
	{1920,	0x77700300 | (0x7) | (0x7<<16) | (0x6<<12) },
	{2048,	0x77700300 | (0x7) | (0x7<<16) | (0x7<<12) },

	{2304,	0x77700300 | (0x8) | (0x4<<16) | (0x3<<12) },
	{2560,	0x77700300 | (0x8) | (0x4<<16) | (0x4<<12) },
	{2816,	0x77700300 | (0x8) | (0x5<<16) | (0x4<<12) },
	{3072,	0x77700300 | (0x8) | (0x5<<16) | (0x5<<12) },
	{3328,	0x77700300 | (0x8) | (0x6<<16) | (0x5<<12) },
	{3584,	0x77700300 | (0x8) | (0x6<<16) | (0x6<<12) },
	{3840,	0x77700300 | (0x8) | (0x7<<16) | (0x6<<12) },
	{4096,	0x77700300 | (0x8) | (0x7<<16) | (0x7<<12) },

	{4608,	0x77700300 | (0x9) | (0x4<<16) | (0x3<<12) },
	{5120,	0x77700300 | (0x9) | (0x4<<16) | (0x4<<12) },
	{5632,	0x77700300 | (0x9) | (0x5<<16) | (0x4<<12) },
	{6144,	0x77700300 | (0x9) | (0x5<<16) | (0x5<<12) },
	{6656,	0x77700300 | (0x9) | (0x6<<16) | (0x5<<12) },
	{7168,	0x77700300 | (0x9) | (0x6<<16) | (0x6<<12) },
	{7680,	0x77700300 | (0x9) | (0x7<<16) | (0x6<<12) },
	{8192,	0x77700300 | (0x9) | (0x7<<16) | (0x7<<12) },

	{9216,	0x77700300 | (0xa) | (0x4<<16) | (0x3<<12) },
	{10240,	0x77700300 | (0xa) | (0x4<<16) | (0x4<<12) },
	{11264,	0x77700300 | (0xa) | (0x5<<16) | (0x4<<12) },
	{12288,	0x77700300 | (0xa) | (0x5<<16) | (0x5<<12) },
	{13312,	0x77700300 | (0xa) | (0x6<<16) | (0x5<<12) },
	{14336,	0x77700300 | (0xa) | (0x6<<16) | (0x6<<12) },
	{15360,	0x77700300 | (0xa) | (0x7<<16) | (0x6<<12) },
	{16384,	0x77700300 | (0xa) | (0x7<<16) | (0x7<<12) },

	{18432,	0x77700300 | (0xb) | (0x4<<16) | (0x3<<12) },
	{20480,	0x77700300 | (0xb) | (0x4<<16) | (0x4<<12) },
	{22528,	0x77700300 | (0xb) | (0x5<<16) | (0x4<<12) },
	{24576,	0x77700300 | (0xb) | (0x5<<16) | (0x5<<12) },
	{26624,	0x77700300 | (0xb) | (0x6<<16) | (0x5<<12) },
	{28672,	0x77700300 | (0xb) | (0x6<<16) | (0x6<<12) },
	{30720,	0x77700300 | (0xb) | (0x7<<16) | (0x6<<12) },
	{32768,	0x77700300 | (0xb) | (0x7<<16) | (0x7<<12) },

	{36864, 0x77700300 | (0xc) | (0x4<<16) | (0x3<<12) },
	{40960, 0x77700300 | (0xc) | (0x4<<16) | (0x4<<12) },
	{45056, 0x77700300 | (0xc) | (0x5<<16) | (0x4<<12) },
	{49152, 0x77700300 | (0xc) | (0x5<<16) | (0x5<<12) },
	{53248, 0x77700300 | (0xc) | (0x6<<16) | (0x5<<12) },
	{57344, 0x77700300 | (0xc) | (0x6<<16) | (0x6<<12) },
	{61440, 0x77700300 | (0xc) | (0x7<<16) | (0x6<<12) },
	{65536, 0x77700300 | (0xc) | (0x7<<16) | (0x7<<12) },

	{73728, 0x77700300 | (0xd) | (0x4<<16) | (0x3<<12) },
	{81920, 0x77700300 | (0xd) | (0x4<<16) | (0x4<<12) },
	{90112, 0x77700300 | (0xd) | (0x5<<16) | (0x4<<12) },
	{98304, 0x77700300 | (0xd) | (0x5<<16) | (0x5<<12) },
	{106496, 0x77700300 | (0xd) | (0x6<<16) | (0x5<<12) },
	{114688, 0x77700300 | (0xd) | (0x6<<16) | (0x6<<12) },
	{122880, 0x77700300 | (0xd) | (0x7<<16) | (0x6<<12) },
	{131072, 0x77700300 | (0xd) | (0x7<<16) | (0x7<<12) },

	{147456, 0x77700300 | (0xe) | (0x4<<16) | (0x3<<12) },
	{163840, 0x77700300 | (0xe) | (0x4<<16) | (0x4<<12) },
	{180224, 0x77700300 | (0xe) | (0x5<<16) | (0x4<<12) },
	{196608, 0x77700300 | (0xe) | (0x5<<16) | (0x5<<12) },
	{212992, 0x77700300 | (0xe) | (0x6<<16) | (0x5<<12) },
	{229376, 0x77700300 | (0xe) | (0x6<<16) | (0x6<<12) },
	{245760, 0x77700300 | (0xe) | (0x7<<16) | (0x6<<12) },
	{262144, 0x77700300 | (0xe) | (0x7<<16) | (0x7<<12) },

	{294912, 0x77700300 | (0xf) | (0x4<<16) | (0x3<<12) },
	{327680, 0x77700300 | (0xf) | (0x4<<16) | (0x4<<12) },
	{360448, 0x77700300 | (0xf) | (0x5<<16) | (0x4<<12) },
	{393216, 0x77700300 | (0xf) | (0x5<<16) | (0x5<<12) },
	{425984, 0x77700300 | (0xf) | (0x6<<16) | (0x5<<12) },
	{458752, 0x77700300 | (0xf) | (0x6<<16) | (0x6<<12) },
	{491520, 0x77700300 | (0xf) | (0x7<<16) | (0x6<<12) },
	{524288, 0x77700300 | (0xf) | (0x7<<16) | (0x7<<12) },	
};	

struct ast_i2c_bus_config   {
	u8	ast_g5_i2c;
	u32	timing_table_size;
	struct ast_i2c_timing_table *timing_table;
};


static struct ast_i2c_bus_config i2c_config = {
	.ast_g5_i2c = 0,
	.timing_table_size = sizeof(ast_i2c_timing_table),
	.timing_table = ast_i2c_timing_table,
};

static struct ast_i2c_bus_config i2c_g5_config = {
	.ast_g5_i2c = 1,
	.timing_table_size = sizeof(ast_g5_i2c_timing_table),
	.timing_table = ast_g5_i2c_timing_table,
};

static const struct of_device_id ast_byte_i2c_bus_of_table[] = {
	{
		.compatible = "aspeed,ast-byte-i2c", 
		.data = &i2c_config,
	},
	{ 
		.compatible = "aspeed,ast-g5-byte-i2c", 
		.data = &i2c_g5_config,
	},
	{
		.compatible = "aspeed,ast-buff-i2c", 
		.data = &i2c_config,
	},
	{ 
		.compatible = "aspeed,ast-g5-buff-i2c", 
		.data = &i2c_g5_config,
	},
	
	{ },
};


//1. usage flag , 2 size,	3. request address
struct buf_page
{
	u8 flag; //0:free to usage, 1: used
	u8 page_no; //for AST2400 usage
	u16 page_size;
	u32 page_addr;
	u32 page_addr_point;
};

typedef enum i2c_slave_event_e {
        I2C_SLAVE_EVENT_START_READ,
        I2C_SLAVE_EVENT_READ,			
        I2C_SLAVE_EVENT_START_WRITE,
        I2C_SLAVE_EVENT_WRITE,     
        I2C_SLAVE_EVENT_NACK,
        I2C_SLAVE_EVENT_STOP
} i2c_slave_event_t;

#define BYTE_MODE	0
#define BUFF_MODE	1
#define DEC_DMA_MODE	2
#define INC_DMA_MODE	3

struct ast_i2c_driver_data {

		u8 		(*request_pool_buff_page)(struct buf_page **page);		//0: ok , 1 fail
//		struct buf_page * (*request_pool_buff_page1)(u8 num);
		void 	(*free_pool_buff_page)(struct buf_page *page);
		unsigned char	*buf_pool;
		void (*slave_xfer)(i2c_slave_event_t event, struct i2c_msg **msgs);
		void (*slave_init)(struct i2c_msg **msgs);
		u32 (*get_i2c_clock)(void);
};

extern u8 request_pool_buff_page(struct buf_page **req_page);
extern void free_pool_buff_page(struct buf_page *req_page);
